# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

service:
  auth: false
  base-path: /users
  endpoints:
    create-session-challenge:
      path: /create-session-challenge
      method: POST
      docs: Create a session challenge for a user
      display-name: Create Session Challenge
      request:
        name: SessionChallengeRequest
      response: SessionChallenge

    get-session-challenge:
      path: /session-challenge
      method: GET
      docs: Get a session challenge by code
      display-name: Get Session Challenge
      request:
        name: GetSessionChallengeRequest
        query-parameters:
          code: string
      response: SessionChallenge

    login-anonymously:
      path: /login-anonymously
      method: POST
      docs: Create an anonymous user session
      display-name: Login Anonymously
      response: Session

    login-with-wallet:
      path: /login-with-wallet
      method: POST
      docs: Log a user in with their wallet using Sign in with Ethereum.
      display-name: Login with Wallet
      request:
        name: LoginWithWalletRequest
        body:
          properties:
            sign_in_wallet: string
      response: LoginWithWalletResponse

    login-with-magic-link:
      path: /login-with-magic-link
      method: POST
      docs: Log a user in with their email and magic link
      display-name: Login with Magic Link
      request:
        name: LoginWithMagicLinkRequest
        body:
          properties:
            email:
              type: string
      response: SessionChallenge

    login-with-email:
      path: /login-with-email
      method: POST
      docs: Log a user in with their email.
      display-name: Login with Email
      request:
        name: LoginWithEmailRequest
        body:
          properties:
            email:
              type: string
      response: LoginWithEmailResponse

    verify-login:
      path: /verify-login
      method: POST
      docs: Verify a user's login challenge and create a session.
      display-name: Verify Login
      request:
        name: VerifyLoginRequest
        body:
          properties:
            user_id:
              type: optional<string>
            verification_code:
              type: optional<string>
            siwe_message:
              type: optional<string>
            signature:
              type: optional<string>
            session_challenge_code:
              type: optional<string>
      response: Session

    refresh-token:
      path: /refresh-token
      method: POST
      docs: Refresh an access token
      display-name: Refresh Token
      request:
        name: RefreshTokenRequest
        body:
          properties:
            session_id:
              type: string
            refresh_token:
              type: string
      response: Session

    logout:
      path: /logout
      method: POST
      docs: Log a user out and clear session cookies (only available in SDKs)
      display-name: Logout

types:
  SessionChallenge:
    properties:
      id:
        type: string
      code:
        type: string
      expired:
        type: boolean
      completed:
        type: boolean
  Session:
    properties:
      id:
        type: string
      created_at:
        type: datetime
      project_id:
        type: string
      user_id:
        type: string
      access_token:
        type: string
      access_token_expires_at:
        type: datetime
      refresh_token:
        type: string
      refresh_token_expires_at:
        type: datetime
  LoginAnonymouslyResponse:
    properties:
      user_id:
        type: string
  LoginWithWalletResponse:
    properties:
      user_id:
        type: string
      nonce:
        type: string
  LoginWithEmailResponse:
    properties:
      user_id:
        type: string
